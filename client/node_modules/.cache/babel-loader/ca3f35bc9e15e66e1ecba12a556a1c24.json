{"ast":null,"code":"import _classCallCheck from \"/Users/silva/Desktop/code/MakeOrMiss/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/silva/Desktop/code/MakeOrMiss/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/silva/Desktop/code/MakeOrMiss/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/silva/Desktop/code/MakeOrMiss/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/silva/Desktop/code/MakeOrMiss/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/silva/Desktop/code/MakeOrMiss/client/src/pages/DV3.js\";\nimport React from \"react\";\nimport * as d3 from \"d3\";\nimport WCdata from '../assets/wclinedata.csv';\nimport ECdata from '../assets/eclinedata.csv';\n\nvar DV3 =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(DV3, _React$Component);\n\n  function DV3() {\n    _classCallCheck(this, DV3);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(DV3).apply(this, arguments));\n  }\n\n  _createClass(DV3, [{\n    key: \"render\",\n    // WCLG() {\n    //   // set the dimensions and margins of the graph\n    //   var margin = { top: 30, right: 50, bottom: 10, left: 50 },\n    //     width = 500,\n    //     height = 600\n    //   // append the svg object to the body of the page\n    //   var svg = d3.select(\"#WCLG\")\n    //     .append(\"svg\")\n    //     .attr(\"width\", width + margin.left + margin.right)\n    //     .attr(\"height\", height + margin.top + margin.bottom)\n    //     .append(\"g\")\n    //     .attr(\"transform\",\n    //       \"translate(\" + margin.left + \",\" + margin.top + \")\");\n    //   // Parse the Data\n    //   d3.csv(WCdata).then (function (data) {\n    //     // Color scale: give me a specie name, I return a color\n    //     var color = d3.scaleOrdinal()\n    //     .domain([\"GS\", \"DEN\", \"POR\", \"HOU\", \"UTA\", \"OKC\", \"SAS\", \"LAC\", \"SAC\", \"LAL\", \"MIN\", \"MEM\", \"NO\", \"DAL\", \"PHX\"])\n    //     .range([ \"#006BB6\", \"#1D428A\",\"#E03A3E\", \"#CE1141\", \"#753BBD\",\"#EF3B24\",\"#8A8D8F\",\"#C8102E\",\"#542E91\",\"#FDB927\",\"#236192\",\"#5D76A9\",\"#85714D\", \"#00538C\",\"#E56020\"])\n    //     // Here I set the list of dimension manually to control the order of axis:\n    //     var dimensions = [\"Losses\", \"Standings\", \"Wins\"]\n    //     // For each dimension, I build a linear scale. I store all in a y object\n    //     var y = {}\n    //     var i = 0; \n    //     for (i in dimensions) {\n    //       var name = dimensions[i]\n    //       y[name] = d3.scaleLinear()\n    //         .domain([10, 70]) // --> Same axis range for each group\n    //         // --> different axis range for each group --> .domain( [d3.extent(data, function(d) { return +d[name]; })] )\n    //         .range([height, 0])\n    //     }\n    //     // Build the X scale -> it find the best position for each Y axis\n    //     var x = d3.scalePoint()\n    //       .range([0, width])\n    //       .domain(dimensions);\n    //     // Highlight the specie that is hovered\n    //     var highlight = function (d) {\n    //       var team = d.Team\n    //       // first every group turns grey\n    //       d3.selectAll(\".line\")\n    //         .transition().duration(200)\n    //         .style(\"stroke\", \"lightgrey\")\n    //         .style(\"opacity\", \"0.2\")\n    //       // Second the hovered specie takes its color\n    //       d3.selectAll(\".\" + team)\n    //         .transition().duration(200)\n    //         .style(\"stroke\", color(team))\n    //         .style(\"opacity\", \"1\")\n    //     }\n    //     // Unhighlight\n    //     var doNotHighlight = function (d) {\n    //       d3.selectAll(\".line\")\n    //         .transition().duration(200).delay(1000)\n    //         .style(\"stroke\", function (d) { return (color(d.Team)) })\n    //         .style(\"opacity\", \"1\")\n    //     }\n    //     // The path function take a row of the csv as input, and return x and y coordinates of the line to draw for this raw.\n    //     function path(d) {\n    //       return d3.line()(dimensions.map(function (p) { return [x(p), y[p](d[p])]; }));\n    //     }\n    //     // Draw the lines\n    //     svg\n    //       .selectAll(\"myPath\")\n    //       .data(data)\n    //       .enter()\n    //       .append(\"path\")\n    //       .attr(\"class\", function (d) { return \"line \" + d.Team }) // 2 class for each line: 'line' and the group name\n    //       .attr(\"d\", path)\n    //       .style(\"fill\", \"none\")\n    //       .style(\"stroke\", function (d) { return (color(d.Team)) })\n    //       .style(\"opacity\", 1)\n    //       .on(\"mouseover\", highlight)\n    //       .on(\"mouseleave\", doNotHighlight)\n    //     // Draw the axis:\n    //     svg.selectAll(\"myAxis\")\n    //       // For each dimension of the dataset I add a 'g' element:\n    //       .data(dimensions).enter()\n    //       .append(\"g\")\n    //       .attr(\"class\", \"axis\")\n    //       // I translate this element to its right position on the x axis\n    //       .attr(\"transform\", function (d) { return \"translate(\" + x(d) + \")\"; })\n    //       // And I build the axis with the call function\n    //       .each(function (d) { d3.select(this).call(d3.axisLeft().ticks(5).scale(y[d])); })\n    //       // Add axis title\n    //       .append(\"text\")\n    //       .style(\"text-anchor\", \"middle\")\n    //       .attr(\"y\", -9)\n    //       .text(function (d) { return d; })\n    //       .style(\"fill\", \"grey\")\n    //   })\n    // }\n    // ECLG() {\n    //   // set the dimensions and margins of the graph\n    //   var margin = { top: 30, right: 50, bottom: 10, left: 50 },\n    //     width = 500,\n    //     height = 600\n    //   // append the svg object to the body of the page\n    //   var svg = d3.select(\"#ECLG\")\n    //     .append(\"svg\")\n    //     .attr(\"width\", width + margin.left + margin.right)\n    //     .attr(\"height\", height + margin.top + margin.bottom)\n    //     .append(\"g\")\n    //     .attr(\"transform\",\n    //       \"translate(\" + margin.left + \",\" + margin.top + \")\");\n    //   // Parse the Data\n    //   d3.csv(ECdata).then (function (data) {\n    //     // Color scale: give me a specie name, I return a color\n    //     var color = d3.scaleOrdinal()\n    //     .domain([\"MIL\", \"TOR\", \"PHI\", \"BOS\", \"IND\", \"BKN\", \"ORL\", \"DET\", \"CHA\", \"MIA\", \"WSH\", \"ATL\", \"CHI\", \"CLE\", \"NY\"])\n    //     .range([ \"#00471B\", \"#CE1141\",\"#006BB6\", \"#007A33\", \"#FDBB30\",\"#000000\",\"#0077C0\",\"#C8102E\",\"#1D1160\",\"#98002E\",\"#E31837\",\"#FFCD00\",\"#BC032B\",\"#6F263D\", \"#F58426\"])\n    //     // Here I set the list of dimension manually to control the order of axis:\n    //     var dimensions = [\"Losses\", \"Standings\", \"Wins\"]\n    //     // For each dimension, I build a linear scale. I store all in a y object\n    //     var y = {}\n    //     var i = 0; \n    //     for (i in dimensions) {\n    //       var name = dimensions[i]\n    //       y[name] = d3.scaleLinear()\n    //         .domain([10, 70]) // --> Same axis range for each group\n    //         // --> different axis range for each group --> .domain( [d3.extent(data, function(d) { return +d[name]; })] )\n    //         .range([height, 0])\n    //     }\n    //     // Build the X scale -> it find the best position for each Y axis\n    //     var x = d3.scalePoint()\n    //       .range([0, width])\n    //       .domain(dimensions);\n    //     // Highlight the specie that is hovered\n    //     var highlight = function (d) {\n    //       var team = d.Team\n    //       // first every group turns grey\n    //       d3.selectAll(\".line\")\n    //         .transition().duration(200)\n    //         .style(\"stroke\", \"lightgrey\")\n    //         .style(\"opacity\", \"0.2\")\n    //       // Second the hovered specie takes its color\n    //       d3.selectAll(\".\" + team)\n    //         .transition().duration(200)\n    //         .style(\"stroke\", color(team))\n    //         .style(\"opacity\", \"1\")\n    //     }\n    //     // Unhighlight\n    //     var doNotHighlight = function (d) {\n    //       d3.selectAll(\".line\")\n    //         .transition().duration(200).delay(1000)\n    //         .style(\"stroke\", function (d) { return (color(d.Team)) })\n    //         .style(\"opacity\", \"1\")\n    //     }\n    //     // The path function take a row of the csv as input, and return x and y coordinates of the line to draw for this raw.\n    //     function path(d) {\n    //       return d3.line()(dimensions.map(function (p) { return [x(p), y[p](d[p])]; }));\n    //     }\n    //     // Draw the lines\n    //     svg\n    //       .selectAll(\"myPath\")\n    //       .data(data)\n    //       .enter()\n    //       .append(\"path\")\n    //       .attr(\"class\", function (d) { return \"line \" + d.Team }) // 2 class for each line: 'line' and the group name\n    //       .attr(\"d\", path)\n    //       .style(\"fill\", \"none\")\n    //       .style(\"stroke\", function (d) { return (color(d.Team)) })\n    //       .style(\"opacity\", 1)\n    //       .on(\"mouseover\", highlight)\n    //       .on(\"mouseleave\", doNotHighlight)\n    //     // Draw the axis:\n    //     svg.selectAll(\"myAxis\")\n    //       // For each dimension of the dataset I add a 'g' element:\n    //       .data(dimensions).enter()\n    //       .append(\"g\")\n    //       .attr(\"class\", \"axis\")\n    //       // I translate this element to its right position on the x axis\n    //       .attr(\"transform\", function (d) { return \"translate(\" + x(d) + \")\"; })\n    //       // And I build the axis with the call function\n    //       .each(function (d) { d3.select(this).call(d3.axisLeft().ticks(5).scale(y[d])); })\n    //       // Add axis title\n    //       .append(\"text\")\n    //       .style(\"text-anchor\", \"middle\")\n    //       .attr(\"y\", -9)\n    //       .text(function (d) { return d; })\n    //       .style(\"fill\", \"grey\")\n    //   })\n    // }\n    // componentDidMount() {\n    //   this.WCLG()\n    //   this.ECLG()\n    // }\n    ////////// R E N D E R //////////\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 231\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 232\n        },\n        __self: this\n      }, \"Line Graph Page\"), React.createElement(\"div\", {\n        className: \"dvContainer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 233\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"lgBox\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 234\n        },\n        __self: this\n      }, {\n        LGW: LGW\n      }), React.createElement(\"div\", {\n        className: \"lgBox\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 235\n        },\n        __self: this\n      }, {\n        LGE: LGE\n      })));\n    }\n  }]);\n\n  return DV3;\n}(React.Component);\n\nexport default DV3;","map":{"version":3,"sources":["/Users/silva/Desktop/code/MakeOrMiss/client/src/pages/DV3.js"],"names":["React","d3","WCdata","ECdata","DV3","LGW","LGE","Component"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,KAAKC,EAAZ,MAAoB,IAApB;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,OAAOC,MAAP,MAAmB,0BAAnB;;IAEMC,G;;;;;;;;;;;;;AAEJ;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;AACA;AAGA;6BAES;AACP,aACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BADF,EAEE;AAAK,QAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACA;AAAK,QAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAwB;AAACC,QAAAA,GAAG,EAAHA;AAAD,OAAxB,CADA,EAEA;AAAK,QAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAwB;AAACC,QAAAA,GAAG,EAAHA;AAAD,OAAxB,CAFA,CAFF,CADF;AAUD;;;;EA1OeN,KAAK,CAACO,S;;AA6OxB,eAAeH,GAAf","sourcesContent":["import React from \"react\";\nimport * as d3 from \"d3\";\nimport WCdata from '../assets/wclinedata.csv'; \nimport ECdata from '../assets/eclinedata.csv';\n\nclass DV3 extends React.Component {\n\n  // WCLG() {\n  //   // set the dimensions and margins of the graph\n  //   var margin = { top: 30, right: 50, bottom: 10, left: 50 },\n  //     width = 500,\n  //     height = 600\n\n  //   // append the svg object to the body of the page\n  //   var svg = d3.select(\"#WCLG\")\n  //     .append(\"svg\")\n  //     .attr(\"width\", width + margin.left + margin.right)\n  //     .attr(\"height\", height + margin.top + margin.bottom)\n  //     .append(\"g\")\n  //     .attr(\"transform\",\n  //       \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n  //   // Parse the Data\n  //   d3.csv(WCdata).then (function (data) {\n\n  //     // Color scale: give me a specie name, I return a color\n  //     var color = d3.scaleOrdinal()\n  //     .domain([\"GS\", \"DEN\", \"POR\", \"HOU\", \"UTA\", \"OKC\", \"SAS\", \"LAC\", \"SAC\", \"LAL\", \"MIN\", \"MEM\", \"NO\", \"DAL\", \"PHX\"])\n  //     .range([ \"#006BB6\", \"#1D428A\",\"#E03A3E\", \"#CE1141\", \"#753BBD\",\"#EF3B24\",\"#8A8D8F\",\"#C8102E\",\"#542E91\",\"#FDB927\",\"#236192\",\"#5D76A9\",\"#85714D\", \"#00538C\",\"#E56020\"])\n\n  //     // Here I set the list of dimension manually to control the order of axis:\n  //     var dimensions = [\"Losses\", \"Standings\", \"Wins\"]\n\n  //     // For each dimension, I build a linear scale. I store all in a y object\n  //     var y = {}\n  //     var i = 0; \n  //     for (i in dimensions) {\n  //       var name = dimensions[i]\n  //       y[name] = d3.scaleLinear()\n  //         .domain([10, 70]) // --> Same axis range for each group\n  //         // --> different axis range for each group --> .domain( [d3.extent(data, function(d) { return +d[name]; })] )\n  //         .range([height, 0])\n  //     }\n\n  //     // Build the X scale -> it find the best position for each Y axis\n  //     var x = d3.scalePoint()\n  //       .range([0, width])\n  //       .domain(dimensions);\n\n  //     // Highlight the specie that is hovered\n  //     var highlight = function (d) {\n\n  //       var team = d.Team\n\n  //       // first every group turns grey\n  //       d3.selectAll(\".line\")\n  //         .transition().duration(200)\n  //         .style(\"stroke\", \"lightgrey\")\n  //         .style(\"opacity\", \"0.2\")\n  //       // Second the hovered specie takes its color\n  //       d3.selectAll(\".\" + team)\n  //         .transition().duration(200)\n  //         .style(\"stroke\", color(team))\n  //         .style(\"opacity\", \"1\")\n  //     }\n\n  //     // Unhighlight\n  //     var doNotHighlight = function (d) {\n  //       d3.selectAll(\".line\")\n  //         .transition().duration(200).delay(1000)\n  //         .style(\"stroke\", function (d) { return (color(d.Team)) })\n  //         .style(\"opacity\", \"1\")\n  //     }\n\n  //     // The path function take a row of the csv as input, and return x and y coordinates of the line to draw for this raw.\n  //     function path(d) {\n  //       return d3.line()(dimensions.map(function (p) { return [x(p), y[p](d[p])]; }));\n  //     }\n\n  //     // Draw the lines\n  //     svg\n  //       .selectAll(\"myPath\")\n  //       .data(data)\n  //       .enter()\n  //       .append(\"path\")\n  //       .attr(\"class\", function (d) { return \"line \" + d.Team }) // 2 class for each line: 'line' and the group name\n  //       .attr(\"d\", path)\n  //       .style(\"fill\", \"none\")\n  //       .style(\"stroke\", function (d) { return (color(d.Team)) })\n  //       .style(\"opacity\", 1)\n  //       .on(\"mouseover\", highlight)\n  //       .on(\"mouseleave\", doNotHighlight)\n\n  //     // Draw the axis:\n  //     svg.selectAll(\"myAxis\")\n  //       // For each dimension of the dataset I add a 'g' element:\n  //       .data(dimensions).enter()\n  //       .append(\"g\")\n  //       .attr(\"class\", \"axis\")\n  //       // I translate this element to its right position on the x axis\n  //       .attr(\"transform\", function (d) { return \"translate(\" + x(d) + \")\"; })\n  //       // And I build the axis with the call function\n  //       .each(function (d) { d3.select(this).call(d3.axisLeft().ticks(5).scale(y[d])); })\n  //       // Add axis title\n  //       .append(\"text\")\n  //       .style(\"text-anchor\", \"middle\")\n  //       .attr(\"y\", -9)\n  //       .text(function (d) { return d; })\n  //       .style(\"fill\", \"grey\")\n\n  //   })\n  // }\n\n  // ECLG() {\n  //   // set the dimensions and margins of the graph\n  //   var margin = { top: 30, right: 50, bottom: 10, left: 50 },\n  //     width = 500,\n  //     height = 600\n\n  //   // append the svg object to the body of the page\n  //   var svg = d3.select(\"#ECLG\")\n  //     .append(\"svg\")\n  //     .attr(\"width\", width + margin.left + margin.right)\n  //     .attr(\"height\", height + margin.top + margin.bottom)\n  //     .append(\"g\")\n  //     .attr(\"transform\",\n  //       \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n  //   // Parse the Data\n  //   d3.csv(ECdata).then (function (data) {\n\n  //     // Color scale: give me a specie name, I return a color\n  //     var color = d3.scaleOrdinal()\n  //     .domain([\"MIL\", \"TOR\", \"PHI\", \"BOS\", \"IND\", \"BKN\", \"ORL\", \"DET\", \"CHA\", \"MIA\", \"WSH\", \"ATL\", \"CHI\", \"CLE\", \"NY\"])\n  //     .range([ \"#00471B\", \"#CE1141\",\"#006BB6\", \"#007A33\", \"#FDBB30\",\"#000000\",\"#0077C0\",\"#C8102E\",\"#1D1160\",\"#98002E\",\"#E31837\",\"#FFCD00\",\"#BC032B\",\"#6F263D\", \"#F58426\"])\n\n  //     // Here I set the list of dimension manually to control the order of axis:\n  //     var dimensions = [\"Losses\", \"Standings\", \"Wins\"]\n\n  //     // For each dimension, I build a linear scale. I store all in a y object\n  //     var y = {}\n  //     var i = 0; \n  //     for (i in dimensions) {\n  //       var name = dimensions[i]\n  //       y[name] = d3.scaleLinear()\n  //         .domain([10, 70]) // --> Same axis range for each group\n  //         // --> different axis range for each group --> .domain( [d3.extent(data, function(d) { return +d[name]; })] )\n  //         .range([height, 0])\n  //     }\n\n  //     // Build the X scale -> it find the best position for each Y axis\n  //     var x = d3.scalePoint()\n  //       .range([0, width])\n  //       .domain(dimensions);\n\n  //     // Highlight the specie that is hovered\n  //     var highlight = function (d) {\n\n  //       var team = d.Team\n\n  //       // first every group turns grey\n  //       d3.selectAll(\".line\")\n  //         .transition().duration(200)\n  //         .style(\"stroke\", \"lightgrey\")\n  //         .style(\"opacity\", \"0.2\")\n  //       // Second the hovered specie takes its color\n  //       d3.selectAll(\".\" + team)\n  //         .transition().duration(200)\n  //         .style(\"stroke\", color(team))\n  //         .style(\"opacity\", \"1\")\n  //     }\n\n  //     // Unhighlight\n  //     var doNotHighlight = function (d) {\n  //       d3.selectAll(\".line\")\n  //         .transition().duration(200).delay(1000)\n  //         .style(\"stroke\", function (d) { return (color(d.Team)) })\n  //         .style(\"opacity\", \"1\")\n  //     }\n\n  //     // The path function take a row of the csv as input, and return x and y coordinates of the line to draw for this raw.\n  //     function path(d) {\n  //       return d3.line()(dimensions.map(function (p) { return [x(p), y[p](d[p])]; }));\n  //     }\n\n  //     // Draw the lines\n  //     svg\n  //       .selectAll(\"myPath\")\n  //       .data(data)\n  //       .enter()\n  //       .append(\"path\")\n  //       .attr(\"class\", function (d) { return \"line \" + d.Team }) // 2 class for each line: 'line' and the group name\n  //       .attr(\"d\", path)\n  //       .style(\"fill\", \"none\")\n  //       .style(\"stroke\", function (d) { return (color(d.Team)) })\n  //       .style(\"opacity\", 1)\n  //       .on(\"mouseover\", highlight)\n  //       .on(\"mouseleave\", doNotHighlight)\n\n  //     // Draw the axis:\n  //     svg.selectAll(\"myAxis\")\n  //       // For each dimension of the dataset I add a 'g' element:\n  //       .data(dimensions).enter()\n  //       .append(\"g\")\n  //       .attr(\"class\", \"axis\")\n  //       // I translate this element to its right position on the x axis\n  //       .attr(\"transform\", function (d) { return \"translate(\" + x(d) + \")\"; })\n  //       // And I build the axis with the call function\n  //       .each(function (d) { d3.select(this).call(d3.axisLeft().ticks(5).scale(y[d])); })\n  //       // Add axis title\n  //       .append(\"text\")\n  //       .style(\"text-anchor\", \"middle\")\n  //       .attr(\"y\", -9)\n  //       .text(function (d) { return d; })\n  //       .style(\"fill\", \"grey\")\n\n  //   })\n  // }\n\n\n  // componentDidMount() {\n  //   this.WCLG()\n  //   this.ECLG()\n  // }\n\n\n  ////////// R E N D E R //////////\n\n  render() {\n    return (\n      <div>\n        <h1>Line Graph Page</h1>\n        <div className=\"dvContainer\">\n        <div className=\"lgBox\">{{LGW}}</div>\n        <div className=\"lgBox\">{{LGE}}</div>\n        </div>\n\n      </div>\n    )\n  }\n}\n\nexport default DV3;"]},"metadata":{},"sourceType":"module"}