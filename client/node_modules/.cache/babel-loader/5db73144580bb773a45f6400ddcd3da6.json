{"ast":null,"code":"import _classCallCheck from \"/Users/silva/Desktop/code/MakeOrMiss/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/silva/Desktop/code/MakeOrMiss/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/silva/Desktop/code/MakeOrMiss/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/silva/Desktop/code/MakeOrMiss/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/silva/Desktop/code/MakeOrMiss/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/silva/Desktop/code/MakeOrMiss/client/src/pages/DV3.js\";\nimport React from \"react\";\nimport * as d3 from \"d3\";\nimport WCdata from '../assets/wclinedata.csv';\nimport ECdata from '../assets/eclinedata.csv';\n\nvar DV3 =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(DV3, _React$Component);\n\n  function DV3() {\n    _classCallCheck(this, DV3);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(DV3).apply(this, arguments));\n  }\n\n  _createClass(DV3, [{\n    key: \"WCLG\",\n    value: function WCLG() {\n      // set the dimensions and margins of the graph\n      var margin = {\n        top: 30,\n        right: 50,\n        bottom: 10,\n        left: 50\n      },\n          width = 500,\n          height = 500; // append the svg object to the body of the page\n\n      var svg = d3.select(\"#WCLG\").append(\"svg\").attr(\"width\", width + margin.left + margin.right).attr(\"height\", height + margin.top + margin.bottom).append(\"g\").attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\"); // Parse the Data\n\n      d3.csv(WCdata).then(function (data) {\n        // Color scale: give me a specie name, I return a color\n        var color = d3.scaleOrdinal().domain([\"GS\", \"DEN\", \"POR\", \"HOU\", \"UTA\", \"OKC\", \"SAS\", \"LAC\", \"SAC\", \"LAL\", \"MIN\", \"MEM\", \"NO\", \"DAL\", \"PHX\"]).range([\"#006BB6\", \"#1D428A\", \"#E03A3E\", \"#CE1141\", \"#753BBD\", \"#EF3B24\", \"#8A8D8F\", \"#C8102E\", \"#542E91\", \"#FDB927\", \"#236192\", \"#5D76A9\", \"#85714D\", \"#00538C\", \"#E56020\"]); // Here I set the list of dimension manually to control the order of axis:\n\n        var dimensions = [\"Losses\", \"Standings\", \"Wins\"]; // For each dimension, I build a linear scale. I store all in a y object\n\n        var y = {};\n        var i = 0;\n\n        for (i in dimensions) {\n          var name = dimensions[i];\n          y[name] = d3.scaleLinear().domain([15, 65]) // --> Same axis range for each group\n          // --> different axis range for each group --> .domain( [d3.extent(data, function(d) { return +d[name]; })] )\n          .range([height, 0]);\n        } // Build the X scale -> it find the best position for each Y axis\n\n\n        var x = d3.scalePoint().range([0, width]).domain(dimensions); // Highlight the specie that is hovered\n\n        var highlight = function highlight(d) {\n          var team = d.Team; // first every group turns grey\n\n          d3.selectAll(\".line\").transition().duration(200).style(\"stroke\", \"lightgrey\").style(\"opacity\", \"0.2\"); // Second the hovered specie takes its color\n\n          d3.selectAll(\".\" + team).transition().duration(200).style(\"stroke\", color(team)).style(\"opacity\", \"1\");\n        }; // Unhighlight\n\n\n        var doNotHighlight = function doNotHighlight(d) {\n          d3.selectAll(\".line\").transition().duration(200).delay(1000).style(\"stroke\", function (d) {\n            return color(d.Team);\n          }).style(\"opacity\", \"1\");\n        }; // The path function take a row of the csv as input, and return x and y coordinates of the line to draw for this raw.\n\n\n        function path(d) {\n          return d3.line()(dimensions.map(function (p) {\n            return [x(p), y[p](d[p])];\n          }));\n        } // Draw the lines\n\n\n        svg.selectAll(\"myPath\").data(data).enter().append(\"path\").attr(\"class\", function (d) {\n          return \"line \" + d.Team;\n        }) // 2 class for each line: 'line' and the group name\n        .attr(\"d\", path).style(\"fill\", \"none\").style(\"stroke\", function (d) {\n          return color(d.Team);\n        }).style(\"opacity\", 1).on(\"mouseover\", highlight).on(\"mouseleave\", doNotHighlight); // Draw the axis:\n\n        svg.selectAll(\"myAxis\") // For each dimension of the dataset I add a 'g' element:\n        .data(dimensions).enter().append(\"g\").attr(\"class\", \"axis\") // I translate this element to its right position on the x axis\n        .attr(\"transform\", function (d) {\n          return \"translate(\" + x(d) + \")\";\n        }) // And I build the axis with the call function\n        .each(function (d) {\n          d3.select(this).call(d3.axisLeft().ticks(5).scale(y[d]));\n        }) // Add axis title\n        .append(\"text\").style(\"text-anchor\", \"middle\").attr(\"y\", -9).text(function (d) {\n          return d;\n        }).style(\"fill\", \"grey\");\n      });\n    }\n  }, {\n    key: \"ECLG\",\n    value: function ECLG() {\n      // set the dimensions and margins of the graph\n      var margin = {\n        top: 30,\n        right: 50,\n        bottom: 10,\n        left: 50\n      },\n          width = 500,\n          height = 500; // append the svg object to the body of the page\n\n      var svg = d3.select(\"#ECLG\").append(\"svg\").attr(\"width\", width + margin.left + margin.right).attr(\"height\", height + margin.top + margin.bottom).append(\"g\").attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\"); // Parse the Data\n\n      d3.csv(ECdata).then(function (data) {\n        // Color scale: give me a specie name, I return a color\n        var color = d3.scaleOrdinal().domain([\"MIL\", \"TOR\", \"PHI\", \"BOS\", \"IND\", \"BKN\", \"ORL\", \"DET\", \"CHA\", \"MIA\", \"WSH\", \"ATL\", \"CHI\", \"CLE\", \"NY\"]).range([\"#00471B\", \"#CE1141\", \"#006BB6\", \"#007A33\", \"#FDBB30\", \"#000000\", \"#0077C0\", \"#C8102E\", \"#1D1160\", \"#98002E\", \"#E31837\", \"#FFCD00\", \"#BC032B\", \"#6F263D\", \"#F58426\"]); // Here I set the list of dimension manually to control the order of axis:\n\n        var dimensions = [\"Losses\", \"Standings\", \"Wins\"]; // For each dimension, I build a linear scale. I store all in a y object\n\n        var y = {};\n        var i = 0;\n\n        for (i in dimensions) {\n          var name = dimensions[i];\n          y[name] = d3.scaleLinear().domain([15, 65]) // --> Same axis range for each group\n          // --> different axis range for each group --> .domain( [d3.extent(data, function(d) { return +d[name]; })] )\n          .range([height, 0]);\n        } // Build the X scale -> it find the best position for each Y axis\n\n\n        var x = d3.scalePoint().range([0, width]).domain(dimensions); // Highlight the specie that is hovered\n\n        var highlight = function highlight(d) {\n          var team = d.Team; // first every group turns grey\n\n          d3.selectAll(\".line\").transition().duration(200).style(\"stroke\", \"lightgrey\").style(\"opacity\", \"0.2\"); // Second the hovered specie takes its color\n\n          d3.selectAll(\".\" + team).transition().duration(200).style(\"stroke\", color(team)).style(\"opacity\", \"1\");\n        }; // Unhighlight\n\n\n        var doNotHighlight = function doNotHighlight(d) {\n          d3.selectAll(\".line\").transition().duration(200).delay(1000).style(\"stroke\", function (d) {\n            return color(d.Team);\n          }).style(\"opacity\", \"1\");\n        }; // The path function take a row of the csv as input, and return x and y coordinates of the line to draw for this raw.\n\n\n        function path(d) {\n          return d3.line()(dimensions.map(function (p) {\n            return [x(p), y[p](d[p])];\n          }));\n        } // Draw the lines\n\n\n        svg.selectAll(\"myPath\").data(data).enter().append(\"path\").attr(\"class\", function (d) {\n          return \"line \" + d.Team;\n        }) // 2 class for each line: 'line' and the group name\n        .attr(\"d\", path).style(\"fill\", \"none\").style(\"stroke\", function (d) {\n          return color(d.Team);\n        }).style(\"opacity\", 1).on(\"mouseover\", highlight).on(\"mouseleave\", doNotHighlight); // Draw the axis:\n\n        svg.selectAll(\"myAxis\") // For each dimension of the dataset I add a 'g' element:\n        .data(dimensions).enter().append(\"g\").attr(\"class\", \"axis\") // I translate this element to its right position on the x axis\n        .attr(\"transform\", function (d) {\n          return \"translate(\" + x(d) + \")\";\n        }) // And I build the axis with the call function\n        .each(function (d) {\n          d3.select(this).call(d3.axisLeft().ticks(5).scale(y[d]));\n        }) // Add axis title\n        .append(\"text\").style(\"text-anchor\", \"middle\").attr(\"y\", -9).text(function (d) {\n          return d;\n        }).style(\"fill\", \"grey\");\n      });\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.WCLG();\n      this.ECLG();\n    } ////////// R E N D E R //////////\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 234\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 235\n        },\n        __self: this\n      }, \"Line Graph Page\"), React.createElement(\"div\", {\n        className: \"dvContainer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 236\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        id: \"WCLG\",\n        className: \"lgBox\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 237\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        id: \"ECLG\",\n        className: \"lgBox\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 238\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return DV3;\n}(React.Component);\n\nexport default DV3;","map":{"version":3,"sources":["/Users/silva/Desktop/code/MakeOrMiss/client/src/pages/DV3.js"],"names":["React","d3","WCdata","ECdata","DV3","margin","top","right","bottom","left","width","height","svg","select","append","attr","csv","then","data","color","scaleOrdinal","domain","range","dimensions","y","i","name","scaleLinear","x","scalePoint","highlight","d","team","Team","selectAll","transition","duration","style","doNotHighlight","delay","path","line","map","p","enter","on","each","call","axisLeft","ticks","scale","text","WCLG","ECLG","Component"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport * as d3 from \"d3\";\nimport WCdata from '../assets/wclinedata.csv'; \nimport ECdata from '../assets/eclinedata.csv';\n\nclass DV3 extends React.Component {\n\n  WCLG() {\n    // set the dimensions and margins of the graph\n    var margin = { top: 30, right: 50, bottom: 10, left: 50 },\n      width = 500,\n      height = 500\n\n    // append the svg object to the body of the page\n    var svg = d3.select(\"#WCLG\")\n      .append(\"svg\")\n      .attr(\"width\", width + margin.left + margin.right)\n      .attr(\"height\", height + margin.top + margin.bottom)\n      .append(\"g\")\n      .attr(\"transform\",\n        \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n    // Parse the Data\n    d3.csv(WCdata).then (function (data) {\n\n      // Color scale: give me a specie name, I return a color\n      var color = d3.scaleOrdinal()\n      .domain([\"GS\", \"DEN\", \"POR\", \"HOU\", \"UTA\", \"OKC\", \"SAS\", \"LAC\", \"SAC\", \"LAL\", \"MIN\", \"MEM\", \"NO\", \"DAL\", \"PHX\"])\n      .range([ \"#006BB6\", \"#1D428A\",\"#E03A3E\", \"#CE1141\", \"#753BBD\",\"#EF3B24\",\"#8A8D8F\",\"#C8102E\",\"#542E91\",\"#FDB927\",\"#236192\",\"#5D76A9\",\"#85714D\", \"#00538C\",\"#E56020\"])\n\n      // Here I set the list of dimension manually to control the order of axis:\n      var dimensions = [\"Losses\", \"Standings\", \"Wins\"]\n\n      // For each dimension, I build a linear scale. I store all in a y object\n      var y = {}\n      var i = 0; \n      for (i in dimensions) {\n        var name = dimensions[i]\n        y[name] = d3.scaleLinear()\n          .domain([15, 65]) // --> Same axis range for each group\n          // --> different axis range for each group --> .domain( [d3.extent(data, function(d) { return +d[name]; })] )\n          .range([height, 0])\n      }\n\n      // Build the X scale -> it find the best position for each Y axis\n      var x = d3.scalePoint()\n        .range([0, width])\n        .domain(dimensions);\n\n      // Highlight the specie that is hovered\n      var highlight = function (d) {\n\n        var team = d.Team\n\n        // first every group turns grey\n        d3.selectAll(\".line\")\n          .transition().duration(200)\n          .style(\"stroke\", \"lightgrey\")\n          .style(\"opacity\", \"0.2\")\n        // Second the hovered specie takes its color\n        d3.selectAll(\".\" + team)\n          .transition().duration(200)\n          .style(\"stroke\", color(team))\n          .style(\"opacity\", \"1\")\n      }\n\n      // Unhighlight\n      var doNotHighlight = function (d) {\n        d3.selectAll(\".line\")\n          .transition().duration(200).delay(1000)\n          .style(\"stroke\", function (d) { return (color(d.Team)) })\n          .style(\"opacity\", \"1\")\n      }\n\n      // The path function take a row of the csv as input, and return x and y coordinates of the line to draw for this raw.\n      function path(d) {\n        return d3.line()(dimensions.map(function (p) { return [x(p), y[p](d[p])]; }));\n      }\n\n      // Draw the lines\n      svg\n        .selectAll(\"myPath\")\n        .data(data)\n        .enter()\n        .append(\"path\")\n        .attr(\"class\", function (d) { return \"line \" + d.Team }) // 2 class for each line: 'line' and the group name\n        .attr(\"d\", path)\n        .style(\"fill\", \"none\")\n        .style(\"stroke\", function (d) { return (color(d.Team)) })\n        .style(\"opacity\", 1)\n        .on(\"mouseover\", highlight)\n        .on(\"mouseleave\", doNotHighlight)\n\n      // Draw the axis:\n      svg.selectAll(\"myAxis\")\n        // For each dimension of the dataset I add a 'g' element:\n        .data(dimensions).enter()\n        .append(\"g\")\n        .attr(\"class\", \"axis\")\n        // I translate this element to its right position on the x axis\n        .attr(\"transform\", function (d) { return \"translate(\" + x(d) + \")\"; })\n        // And I build the axis with the call function\n        .each(function (d) { d3.select(this).call(d3.axisLeft().ticks(5).scale(y[d])); })\n        // Add axis title\n        .append(\"text\")\n        .style(\"text-anchor\", \"middle\")\n        .attr(\"y\", -9)\n        .text(function (d) { return d; })\n        .style(\"fill\", \"grey\")\n\n    })\n  }\n\n  ECLG() {\n    // set the dimensions and margins of the graph\n    var margin = { top: 30, right: 50, bottom: 10, left: 50 },\n      width = 500,\n      height = 500\n\n    // append the svg object to the body of the page\n    var svg = d3.select(\"#ECLG\")\n      .append(\"svg\")\n      .attr(\"width\", width + margin.left + margin.right)\n      .attr(\"height\", height + margin.top + margin.bottom)\n      .append(\"g\")\n      .attr(\"transform\",\n        \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n    // Parse the Data\n    d3.csv(ECdata).then (function (data) {\n\n      // Color scale: give me a specie name, I return a color\n      var color = d3.scaleOrdinal()\n      .domain([\"MIL\", \"TOR\", \"PHI\", \"BOS\", \"IND\", \"BKN\", \"ORL\", \"DET\", \"CHA\", \"MIA\", \"WSH\", \"ATL\", \"CHI\", \"CLE\", \"NY\"])\n      .range([ \"#00471B\", \"#CE1141\",\"#006BB6\", \"#007A33\", \"#FDBB30\",\"#000000\",\"#0077C0\",\"#C8102E\",\"#1D1160\",\"#98002E\",\"#E31837\",\"#FFCD00\",\"#BC032B\",\"#6F263D\", \"#F58426\"])\n\n      // Here I set the list of dimension manually to control the order of axis:\n      var dimensions = [\"Losses\", \"Standings\", \"Wins\"]\n\n      // For each dimension, I build a linear scale. I store all in a y object\n      var y = {}\n      var i = 0; \n      for (i in dimensions) {\n        var name = dimensions[i]\n        y[name] = d3.scaleLinear()\n          .domain([15, 65]) // --> Same axis range for each group\n          // --> different axis range for each group --> .domain( [d3.extent(data, function(d) { return +d[name]; })] )\n          .range([height, 0])\n      }\n\n      // Build the X scale -> it find the best position for each Y axis\n      var x = d3.scalePoint()\n        .range([0, width])\n        .domain(dimensions);\n\n      // Highlight the specie that is hovered\n      var highlight = function (d) {\n\n        var team = d.Team\n\n        // first every group turns grey\n        d3.selectAll(\".line\")\n          .transition().duration(200)\n          .style(\"stroke\", \"lightgrey\")\n          .style(\"opacity\", \"0.2\")\n        // Second the hovered specie takes its color\n        d3.selectAll(\".\" + team)\n          .transition().duration(200)\n          .style(\"stroke\", color(team))\n          .style(\"opacity\", \"1\")\n      }\n\n      // Unhighlight\n      var doNotHighlight = function (d) {\n        d3.selectAll(\".line\")\n          .transition().duration(200).delay(1000)\n          .style(\"stroke\", function (d) { return (color(d.Team)) })\n          .style(\"opacity\", \"1\")\n      }\n\n      // The path function take a row of the csv as input, and return x and y coordinates of the line to draw for this raw.\n      function path(d) {\n        return d3.line()(dimensions.map(function (p) { return [x(p), y[p](d[p])]; }));\n      }\n\n      // Draw the lines\n      svg\n        .selectAll(\"myPath\")\n        .data(data)\n        .enter()\n        .append(\"path\")\n        .attr(\"class\", function (d) { return \"line \" + d.Team }) // 2 class for each line: 'line' and the group name\n        .attr(\"d\", path)\n        .style(\"fill\", \"none\")\n        .style(\"stroke\", function (d) { return (color(d.Team)) })\n        .style(\"opacity\", 1)\n        .on(\"mouseover\", highlight)\n        .on(\"mouseleave\", doNotHighlight)\n\n      // Draw the axis:\n      svg.selectAll(\"myAxis\")\n        // For each dimension of the dataset I add a 'g' element:\n        .data(dimensions).enter()\n        .append(\"g\")\n        .attr(\"class\", \"axis\")\n        // I translate this element to its right position on the x axis\n        .attr(\"transform\", function (d) { return \"translate(\" + x(d) + \")\"; })\n        // And I build the axis with the call function\n        .each(function (d) { d3.select(this).call(d3.axisLeft().ticks(5).scale(y[d])); })\n        // Add axis title\n        .append(\"text\")\n        .style(\"text-anchor\", \"middle\")\n        .attr(\"y\", -9)\n        .text(function (d) { return d; })\n        .style(\"fill\", \"grey\")\n\n    })\n  }\n\n\n\n\n\n  componentDidMount() {\n    this.WCLG()\n    this.ECLG()\n  }\n\n\n  ////////// R E N D E R //////////\n\n  render() {\n    return (\n      <div>\n        <h1>Line Graph Page</h1>\n        <div className=\"dvContainer\">\n        <div id=\"WCLG\" className=\"lgBox\"></div>\n        <div id=\"ECLG\" className=\"lgBox\"></div>\n        </div>\n\n      </div>\n    )\n  }\n}\n\nexport default DV3;"]},"metadata":{},"sourceType":"module"}