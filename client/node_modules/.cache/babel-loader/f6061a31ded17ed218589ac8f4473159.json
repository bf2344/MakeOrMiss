{"ast":null,"code":"import _classCallCheck from \"/Users/silva/Desktop/code/MakeOrMiss/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/silva/Desktop/code/MakeOrMiss/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/silva/Desktop/code/MakeOrMiss/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/silva/Desktop/code/MakeOrMiss/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/silva/Desktop/code/MakeOrMiss/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/silva/Desktop/code/MakeOrMiss/client/src/pages/DV3.js\";\nimport React from \"react\";\nimport * as d3 from \"d3\";\n\nvar DV3 =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(DV3, _React$Component);\n\n  function DV3() {\n    _classCallCheck(this, DV3);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(DV3).apply(this, arguments));\n  }\n\n  _createClass(DV3, [{\n    key: \"LineG\",\n    value: function LineG() {\n      // set the dimensions and margins of the graph\n      var margin = {\n        top: 30,\n        right: 50,\n        bottom: 10,\n        left: 50\n      },\n          width = 460 - margin.left - margin.right,\n          height = 400 - margin.top - margin.bottom; // append the svg object to the body of the page\n\n      var svg = d3.select(\"#lineG\").append(\"svg\").attr(\"width\", width + margin.left + margin.right).attr(\"height\", height + margin.top + margin.bottom).append(\"g\").attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\"); // Parse the Data\n\n      d3.csv(\"https://raw.githubusercontent.com/holtzy/D3-graph-gallery/master/DATA/iris.csv\").then(function (data) {\n        // Color scale: give me a specie name, I return a color\n        var color = d3.scaleOrdinal().domain([\"setosa\", \"versicolor\", \"virginica\"]).range([\"#440154ff\", \"#21908dff\", \"#fde725ff\"]); // Here I set the list of dimension manually to control the order of axis:\n\n        var dimensions = [\"Petal_Length\", \"Petal_Width\", \"Sepal_Length\", \"Sepal_Width\"]; // For each dimension, I build a linear scale. I store all in a y object\n\n        var y = {};\n        var i = 0;\n\n        for (i in dimensions) {\n          var name = dimensions[i];\n          y[name] = d3.scaleLinear().domain([0, 8]) // --> Same axis range for each group\n          // --> different axis range for each group --> .domain( [d3.extent(data, function(d) { return +d[name]; })] )\n          .range([height, 0]);\n        } // Build the X scale -> it find the best position for each Y axis\n\n\n        var x = d3.scalePoint().range([0, width]).domain(dimensions); // Highlight the specie that is hovered\n\n        var highlight = function highlight(d) {\n          var selected_specie = d.Species; // first every group turns grey\n\n          d3.selectAll(\".line\").transition().duration(200).style(\"stroke\", \"lightgrey\").style(\"opacity\", \"0.2\"); // Second the hovered specie takes its color\n\n          d3.selectAll(\".\" + selected_specie).transition().duration(200).style(\"stroke\", color(selected_specie)).style(\"opacity\", \"1\");\n        }; // Unhighlight\n\n\n        var doNotHighlight = function doNotHighlight(d) {\n          d3.selectAll(\".line\").transition().duration(200).delay(1000).style(\"stroke\", function (d) {\n            return color(d.Species);\n          }).style(\"opacity\", \"1\");\n        }; // The path function take a row of the csv as input, and return x and y coordinates of the line to draw for this raw.\n\n\n        function path(d) {\n          return d3.line()(dimensions.map(function (p) {\n            return [x(p), y[p](d[p])];\n          }));\n        } // Draw the lines\n\n\n        svg.selectAll(\"myPath\").data(data).enter().append(\"path\").attr(\"class\", function (d) {\n          return \"line \" + d.Species;\n        }) // 2 class for each line: 'line' and the group name\n        .attr(\"d\", path).style(\"fill\", \"none\").style(\"stroke\", function (d) {\n          return color(d.Species);\n        }).style(\"opacity\", 0.5).on(\"mouseover\", highlight).on(\"mouseleave\", doNotHighlight); // Draw the axis:\n\n        svg.selectAll(\"myAxis\") // For each dimension of the dataset I add a 'g' element:\n        .data(dimensions).enter().append(\"g\").attr(\"class\", \"axis\") // I translate this element to its right position on the x axis\n        .attr(\"transform\", function (d) {\n          return \"translate(\" + x(d) + \")\";\n        }) // And I build the axis with the call function\n        .each(function (d) {\n          d3.select(this).call(d3.axisLeft().ticks(5).scale(y[d]));\n        }) // Add axis title\n        .append(\"text\").style(\"text-anchor\", \"middle\").attr(\"y\", -9).text(function (d) {\n          return d;\n        }).style(\"fill\", \"black\");\n      });\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.LineG();\n    } ////////// R E N D E R //////////\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"middle\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122\n        },\n        __self: this\n      }, \"Forecast Page\"), React.createElement(\"div\", {\n        id: \"lineG\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return DV3;\n}(React.Component);\n\nexport default DV3;","map":{"version":3,"sources":["/Users/silva/Desktop/code/MakeOrMiss/client/src/pages/DV3.js"],"names":["React","d3","DV3","margin","top","right","bottom","left","width","height","svg","select","append","attr","csv","then","data","color","scaleOrdinal","domain","range","dimensions","y","i","name","scaleLinear","x","scalePoint","highlight","d","selected_specie","Species","selectAll","transition","duration","style","doNotHighlight","delay","path","line","map","p","enter","on","each","call","axisLeft","ticks","scale","text","LineG","Component"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport * as d3 from \"d3\";\n\nclass DV3 extends React.Component {\n\n  LineG() {\n    // set the dimensions and margins of the graph\n    var margin = { top: 30, right: 50, bottom: 10, left: 50 },\n      width = 460 - margin.left - margin.right,\n      height = 400 - margin.top - margin.bottom;\n\n    // append the svg object to the body of the page\n    var svg = d3.select(\"#lineG\")\n      .append(\"svg\")\n      .attr(\"width\", width + margin.left + margin.right)\n      .attr(\"height\", height + margin.top + margin.bottom)\n      .append(\"g\")\n      .attr(\"transform\",\n        \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n    // Parse the Data\n    d3.csv(\"https://raw.githubusercontent.com/holtzy/D3-graph-gallery/master/DATA/iris.csv\").then (function (data) {\n\n      // Color scale: give me a specie name, I return a color\n      var color = d3.scaleOrdinal()\n        .domain([\"setosa\", \"versicolor\", \"virginica\"])\n        .range([\"#440154ff\", \"#21908dff\", \"#fde725ff\"])\n\n      // Here I set the list of dimension manually to control the order of axis:\n      var dimensions = [\"Petal_Length\", \"Petal_Width\", \"Sepal_Length\", \"Sepal_Width\"]\n\n      // For each dimension, I build a linear scale. I store all in a y object\n      var y = {}\n      var i = 0; \n      for (i in dimensions) {\n        var name = dimensions[i]\n        y[name] = d3.scaleLinear()\n          .domain([0, 8]) // --> Same axis range for each group\n          // --> different axis range for each group --> .domain( [d3.extent(data, function(d) { return +d[name]; })] )\n          .range([height, 0])\n      }\n\n      // Build the X scale -> it find the best position for each Y axis\n      var x = d3.scalePoint()\n        .range([0, width])\n        .domain(dimensions);\n\n      // Highlight the specie that is hovered\n      var highlight = function (d) {\n\n        var selected_specie = d.Species\n\n        // first every group turns grey\n        d3.selectAll(\".line\")\n          .transition().duration(200)\n          .style(\"stroke\", \"lightgrey\")\n          .style(\"opacity\", \"0.2\")\n        // Second the hovered specie takes its color\n        d3.selectAll(\".\" + selected_specie)\n          .transition().duration(200)\n          .style(\"stroke\", color(selected_specie))\n          .style(\"opacity\", \"1\")\n      }\n\n      // Unhighlight\n      var doNotHighlight = function (d) {\n        d3.selectAll(\".line\")\n          .transition().duration(200).delay(1000)\n          .style(\"stroke\", function (d) { return (color(d.Species)) })\n          .style(\"opacity\", \"1\")\n      }\n\n      // The path function take a row of the csv as input, and return x and y coordinates of the line to draw for this raw.\n      function path(d) {\n        return d3.line()(dimensions.map(function (p) { return [x(p), y[p](d[p])]; }));\n      }\n\n      // Draw the lines\n      svg\n        .selectAll(\"myPath\")\n        .data(data)\n        .enter()\n        .append(\"path\")\n        .attr(\"class\", function (d) { return \"line \" + d.Species }) // 2 class for each line: 'line' and the group name\n        .attr(\"d\", path)\n        .style(\"fill\", \"none\")\n        .style(\"stroke\", function (d) { return (color(d.Species)) })\n        .style(\"opacity\", 0.5)\n        .on(\"mouseover\", highlight)\n        .on(\"mouseleave\", doNotHighlight)\n\n      // Draw the axis:\n      svg.selectAll(\"myAxis\")\n        // For each dimension of the dataset I add a 'g' element:\n        .data(dimensions).enter()\n        .append(\"g\")\n        .attr(\"class\", \"axis\")\n        // I translate this element to its right position on the x axis\n        .attr(\"transform\", function (d) { return \"translate(\" + x(d) + \")\"; })\n        // And I build the axis with the call function\n        .each(function (d) { d3.select(this).call(d3.axisLeft().ticks(5).scale(y[d])); })\n        // Add axis title\n        .append(\"text\")\n        .style(\"text-anchor\", \"middle\")\n        .attr(\"y\", -9)\n        .text(function (d) { return d; })\n        .style(\"fill\", \"black\")\n\n    })\n  }\n\n  componentDidMount() {\n    this.LineG()\n  }\n\n\n  ////////// R E N D E R //////////\n\n  render() {\n    return (\n      <div className=\"middle\">\n        <h1>Forecast Page</h1>\n        <div id=\"lineG\"></div>\n    \n\n      </div>\n    )\n  }\n}\n\nexport default DV3;"]},"metadata":{},"sourceType":"module"}